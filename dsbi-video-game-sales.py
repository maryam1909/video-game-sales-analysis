# -*- coding: utf-8 -*-
"""dsbi_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uc9gURcbW5r0qEw2Tnsc6Xez7RIUcSrA
"""

import pandas as pd

df_games = pd.read_csv('Video_Games.csv')

df_games.head()

df_games.shape

display(df_games.head())
display(df_games.tail())

df_games.columns

df_games.info()

list_categorical_features = ['Name', 'Platform', 'Genre', 'Publisher', 'Developer', 'Rating']
df_games[list_categorical_features] = df_games[list_categorical_features].astype('category')

df_games['User_Score'] = pd.to_numeric(df_games['User_Score'], errors='coerce')

display(df_games.describe().round(3).T) # numerical
display(df_games.describe(include = ['object', 'bool', 'category']).T) # categorical

df_games = df_games[[
#     'index',
    'Name', 'Platform', 'Year_of_Release', 'Genre', 'Publisher',
    'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales',
     'Critic_Score', 'Critic_Count', 'User_Score', 'User_Count', 'Developer',
     'Rating'
]].copy()

df_games.isnull().sum()

df_games.dropna(subset=['Year_of_Release', 'Genre'], inplace=True)

df_games.loc[df_games.duplicated()]

df_games.drop_duplicates(subset=['Name', 'Platform'], inplace=True)

df_games['Year_of_Release'] = df_games['Year_of_Release'].astype(int)

df_games.info()

print(df_games.isnull().sum())
print(df_games[['Global_Sales', 'Year_of_Release']].describe())

import numpy as np

# Convert 'Developer' to object type temporarily to allow replacements
df_games['Developer'] = df_games['Developer'].astype(str)

# Replace string "nan" with actual np.nan
df_games['Developer'] = df_games['Developer'].replace("nan", np.nan)

# Fill NaNs with 'Unknown'
df_games['Developer'] = df_games['Developer'].fillna('Unknown')

# Convert back to category (with 'Unknown' now included)
df_games['Developer'] = df_games['Developer'].astype('category')

df_games['Rating'] = df_games['Rating'].astype(str)
df_games['Rating'] = df_games['Rating'].replace("nan", np.nan)
df_games['Rating'] = df_games['Rating'].fillna('Unknown')
df_games['Rating'] = df_games['Rating'].astype('category')

df_games['Critic_Score'] = df_games.groupby('Genre', observed=True)['Critic_Score'].transform(
    lambda x: x.fillna(x.median())
)

df_games['User_Score'] = df_games.groupby('Publisher', observed=True)['User_Score'].transform(
    lambda x: x.fillna(x.median())
)

print(df_games.isnull().sum())

df_games.to_csv('cleaned_data.csv', index=False)

print("Total Games:", df_games['Name'].nunique())
print("Total Publishers:", df_games['Publisher'].nunique())
print("Time Range:", df_games['Year_of_Release'].min(), "to", df_games['Year_of_Release'].max())
print("Average Critic Score:", round(df_games['Critic_Score'].mean(), 2))
print("Average User Score:", round(df_games['User_Score'].mean(), 2))

"""UNIVARIANTE ANALYSIS

"""

import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
from scipy import stats

def summary_numerical_dist(df_data, col, q_min, q_max):

    fig = plt.figure(figsize = (8, 4), facecolor = "white")

    layout_plot = (2, 2)
    num_subplot = 4
    axes = [None for _ in range(num_subplot)]
    list_shape_subplot = [[(0, 0), (0, 1), (1, 0), (1, 1)], [1, 1, 1, 1], [1, 1, 1, 1]]
    for i in range(num_subplot):
        axes[i] = plt.subplot2grid(
            layout_plot, list_shape_subplot[0][i],
            rowspan = list_shape_subplot[1][i],
            colspan = list_shape_subplot[2][i]
        )

    sns.histplot(data = df_data, x = col, kde = True, ax = axes[0])
    stats.probplot(x = df_data[col], dist = stats.norm, plot = axes[1])
    sns.boxplot(data = df_data, x = col, ax = axes[2])
    pts = df_data[col].quantile(q = np.arange(q_min, q_max, 0.01))
    sns.lineplot(x = pts.index, y = pts, ax = axes[3])
    axes[3].grid(True)

    list_title = ["Histogram", "QQ plot", "Boxplot", "Outlier"]
    for i in range(num_subplot):
        axes[i].set_title(list_title[i])
    plt.suptitle(f"Distribution of: {col}", fontsize = 15)
    plt.tight_layout()
    plt.show()

def summary_categorical_dist(df_data, col):

    fig = plt.figure(figsize = (8, 4), facecolor = "white")

    layout_plot = (1, 2)
    num_subplot = 2
    axes = [None for _ in range(num_subplot)]
    list_shape_subplot = [[(0, 0), (0, 1)], [1, 1], [1, 1]]
    for i in range(num_subplot):
        axes[i] = plt.subplot2grid(
            layout_plot, list_shape_subplot[0][i],
            rowspan = list_shape_subplot[1][i],
            colspan = list_shape_subplot[2][i]
        )

    count = df_data[col].value_counts().sort_index()

    sns.countplot(data = df_data, y = col, order = count.index, ax = axes[0])
    axes[1].pie(data = df_data, x = count, labels = count.index, autopct = '%1.1f%%', startangle = 90)

    list_title = ["Counts", "Proportions"]
    for i in range(num_subplot):
        axes[i].set_title(list_title[i])
    plt.suptitle(f"Distribution of: {col}", fontsize = 15)
    plt.tight_layout()
    plt.show()

"""1.Numerical"""

summary_numerical_dist(df_games, 'Year_of_Release', .95, 1)

"""The Year_of_Release data is right-skewed with most releases occurring between 2000 and 2010.

There are outliers especially in the early years (before 1995) and possibly in the most recent years (2015–2016).

The distribution is not normal as shown by the QQ plot and the presence of outliers.

The data suggests a significant increase in releases during the 2000s followed by a decline or incomplete data in the most recent years.
"""

summary_numerical_dist(df_games, 'NA_Sales', .95, 1)

"""
The North American market is dominated by a few blockbuster games.
Most games sell very little, but a small number achieve massive sales.
The data is not normally distributed and contains many outliers."""

summary_numerical_dist(df_games, 'EU_Sales', .95, 1)

"""The European market also has a "long tail" with a few high-selling games.

The distribution is right-skewed and not normal.

This helps compare regional sales patterns and supports business decisions for targeting the European market.
"""

summary_numerical_dist(df_games, 'JP_Sales', .95, 1)

"""The Japanese market is smaller in terms of blockbuster sales, with most games selling very little.

There are still outliers, but they are less extreme than in NA/EU.
"""

summary_numerical_dist(df_games, 'Other_Sales', .95, 1)

"""The "Other" region (rest of world) is a small market for most games, but a few titles achieve significant sales.

The distribution is not normal and is dominated by a few outliers.
"""

summary_numerical_dist(df_games, 'Global_Sales', .95, 1)

"""The video game industry is hit-driven: a small number of games account for a large share of total sales.

The distribution is not normal and is heavily influenced by outliers.
"""

summary_numerical_dist(df_games, 'Critic_Score', 0, 1)
summary_numerical_dist(df_games, 'User_Score', 0, 1)

"""Most games receive moderate to high critic scores; very low scores are rare.

The distribution is closer to normal than sales data, but still not perfect.

Most games receive moderate to high user scores; very low scores are rare.

The distribution is similar to critic scores, but with a slight right skew.

2. Categorical
"""

summary_categorical_dist(df_games, 'Genre')

"""The largest number of games released is in the "Action" genre with more than 2000 games, followed by the "Sports" genre with about 1500 games. Genres such as "Shooter", "Racing", "Role-Playing", "Misc" have a lower number of about 800 to 1000 games. The remaining genres have a number of less than 550 games."""

plt.figure(figsize=(12,6))
sns.countplot(data=df_games, x='Rating', order=df_games['Rating'].value_counts().index)
plt.title('Game Count by Rating')
plt.show()

"""The market is dominated by family-friendly games.

There is a significant amount of missing data for ratings, which should be addressed or acknowledged in your report.
"""

plt.figure(figsize=(20, 8))
df_games.Platform.value_counts().plot.bar(linewidth=1.5, edgecolor="green")
plt.grid()
plt.tick_params(axis='x', rotation=45)
plt.title(label="Number of Games release by Platform")

"""The PS2 era was the most prolific in terms of game releases, reflecting its long lifespan and popularity.

Microsoft and Sony platforms dominate the top, but Nintendo has a strong presence with multiple platforms.

Platforms with very few releases are likely obsolete or niche.
"""

plt.figure(figsize=(20, 8))
df_games.Publisher.value_counts().head(10).plot.bar(linewidth=1.5, edgecolor="green")
plt.grid()
plt.tick_params(axis='x', rotation=45)
plt.title(label="Number of Games release by Publisher")

"""EA, Ubisoft, and Activision are the most prolific publishers, indicating their significant influence on the market.

Nintendo, while not the top in quantity, is known for high-selling titles (as seen in earlier analyses).

The presence of both platform holders (Sony, Nintendo) and third-party publishers (EA, Ubisoft) shows a mix of strategies.

temporal trend analysis
"""

plt.figure(figsize=(12,6))
sns.countplot(data=df_games, x='Year_of_Release', order=sorted(df_games['Year_of_Release'].unique()))
plt.title('Number of Games Released per Year')
plt.xticks(rotation=45)
plt.show()

sales_by_year = df_games.groupby('Year_of_Release')['Global_Sales'].sum()
plt.figure(figsize=(12,6))
sales_by_year.plot()
plt.title('Global Sales Over Years')
plt.xlabel('Year')
plt.ylabel('Global Sales (millions)')
plt.grid(True)
plt.show()

"""The early 2000s to 2010 was a boom period for the video game industry, likely due to the rise of new consoles and global market expansion.

The decline after 2010 may be due to market saturation, the rise of mobile gaming (not well represented in this dataset), or changes in industry strategy.

The sales trend closely follows the release trend, confirming that the 2000s were the industry’s golden era.

The decline after 2010 suggests a shift in consumer behavior, possibly toward digital/mobile gaming or fewer but bigger releases.

# Top Publishers, Platforms, and Genres
"""

top_publishers = df_games.groupby('Publisher')['Global_Sales'].sum().sort_values(ascending=False).head(10)
top_publishers.plot(kind='bar', figsize=(12,6), title='Top 10 Publishers by Global Sales')

top_platforms = df_games.groupby('Platform')['Global_Sales'].sum().sort_values(ascending=False).head(10)
top_platforms.plot(kind='bar', figsize=(12,6), title='Top 10 Platforms by Global Sales', color='teal')


top_genres = df_games.groupby('Genre')['Global_Sales'].sum().sort_values(ascending=False).head(10)
top_genres.plot(kind='bar', figsize=(12,6), title='Top Genres by Global Sales', color='orange')

"""The Action genre dominates the market, both in terms of the number of games and total sales.

Sports and Shooter genres are also highly lucrative.

Puzzle and Simulation games are niche, with lower overall sales.

# Region-wise Sales by Genre
"""

region_cols = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']
for region in region_cols:
    plt.figure(figsize=(6,3))
    sns.barplot(data=df_games, x='Genre', y=region, estimator='mean', order=df_games['Genre'].value_counts().index)
    plt.title(f'Average {region} by Genre')
    plt.xticks(rotation=45)
    plt.show()

"""Regional Preferences:

North America and Europe favor Shooter, Platform, and Racing genres.

Japan strongly prefers Role-Playing and Platform games.

The "Other" region follows a pattern similar to NA/EU but with lower sales overall.

Strategic Insight:

Game developers and publishers should tailor their genre focus based on regional market preferences.

RELATIONSHIP ANALYSIS
"""

plt.figure(figsize=(10,6))
sns.heatmap(df_games.corr(numeric_only=True), annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(data=df_games, x='Critic_Score', y='User_Score')
sns.regplot(data=df_games, x='Critic_Score', y='User_Score', scatter=False, color='red')
plt.title('Critic Score vs User Score')
plt.show()

"""Global sales are driven mainly by North America and Europe.

Japan is a unique market, less correlated with global trends.

Critic and user scores are only moderately correlated, suggesting critics and users often agree but not always.

Critics and users generally agree on game quality, but there are exceptions (some games are loved by critics but not users, and vice versa).

The moderate correlation (as seen in the heatmap) is visually confirmed.
"""

plt.figure(figsize=(12,6))
sns.boxplot(data=df_games, x='Genre', y='Global_Sales')
plt.xticks(rotation=45)
plt.title('Global Sales Distribution by Genre')
plt.show()

plt.figure(figsize=(12,6))
sns.boxplot(data=df_games, x='Rating', y='Global_Sales')
plt.title('Global Sales Distribution by Rating')
plt.show()

"""Certain genres (Platform, Shooter, Sports, Racing) are more likely to produce blockbuster hits.

Other genres (Puzzle, Simulation, Strategy) are more niche, with lower sales potential.

Family-friendly games (E) have the potential for blockbuster sales, likely due to a broader audience.

Mature and Teen games can also be successful but are less likely to reach the highest sales.

AO, EC, RP ratings are rare and not commercially significant.
"""

# Sales by region across years
region_year = df_games.groupby('Year_of_Release')[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].sum().reset_index()

plt.figure(figsize=(14, 6))
sns.lineplot(data=region_year, x='Year_of_Release', y='NA_Sales', label='NA')
sns.lineplot(data=region_year, x='Year_of_Release', y='EU_Sales', label='EU')
sns.lineplot(data=region_year, x='Year_of_Release', y='JP_Sales', label='JP')
sns.lineplot(data=region_year, x='Year_of_Release', y='Other_Sales', label='Other')
plt.title("Regional Sales Trends Over Time")
plt.ylabel("Sales (Millions)")
plt.grid()
plt.legend()
plt.show()

"""North America led global sales, peaking around 2008–2010, but has declined sharply since.

Europe followed a similar pattern with a steadier drop, while Japan peaked early and then plateaued.

Other regions show consistent growth, indicating strong potential in emerging markets.

Global video game sales peaked between 2008–2011, with over 480 million units sold, marking the industry's golden years.

Post-2011, sales declined steadily, likely due to market saturation, shift to mobile/cloud gaming, and fewer blockbuster console launches.

Highlights the need for innovation and adaptation in publishing strategy for sustainable growth.
"""

genre_year = df_games.groupby(['Year_of_Release', 'Genre'])['Global_Sales'].sum().reset_index()
top_genre_year = genre_year.loc[genre_year.groupby('Year_of_Release')['Global_Sales'].idxmax()]

plt.figure(figsize=(14, 7))
sns.barplot(data=top_genre_year, x='Year_of_Release', y='Global_Sales', hue='Genre', dodge=False)
plt.title("Top-Selling Genre Each Year")
plt.xticks(rotation=45)
plt.ylabel("Sales (Millions)")
plt.grid()
plt.show()

"""Genre popularity shifts over time, with Action and Sports genres leading in the 2000s.

The chart also reflects the overall industry sales cycle.
"""

region_sales = df_games[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].sum().reset_index()
region_sales.columns = ['Region', 'Total_Sales']

plt.figure(figsize=(8, 6))
sns.barplot(data=region_sales, x='Region', y='Total_Sales', palette='pastel')
plt.title("Total Sales by Region")
plt.ylabel("Sales (Millions)")
plt.grid()
plt.show()

"""The video game industry is driven primarily by the North American market.

Europe is also a major market, while Japan and Other regions are smaller but still significant.


"""

plt.figure(figsize = (5, 3), facecolor = "white")

sns.pairplot(
    data = df_games,
    vars = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']
)

plt.show()

"""Positive Correlation Between NA_Sales and EU_Sales:

The scatter plots between NA_Sales and EU_Sales show a clear upward trend.

Games that sell well in North America often also sell well in Europe, though there are exceptions.

Weaker Correlation with JP_Sales:

The scatter plots involving JP_Sales (with NA_Sales or EU_Sales) show a much more dispersed pattern.

Many games with high NA/EU sales have low JP sales, and vice versa.

This suggests that the Japanese market has distinct preferences compared to Western markets.

Presence of Outliers:

There are a few points far from the main cluster, representing blockbuster games with exceptionally high sales in one or more regions.

Most games cluster near the origin, indicating low sales in all regions for the majority of titles.

Long Tail Distribution:

The majority of games have low sales, with a small number achieving high sales in one or more regions.

This is consistent with the “hit-driven” nature of the video game industry.

PROBLEM DISCOVERY AND SOLUTION

Why jp sales has different pattern from na sales and eu sales?
"""

fig = plt.figure(figsize = (5, 4), facecolor = "white")

layout_plot = (2, 2)
num_subplot = 4
axes = [None for _ in range(num_subplot)]
list_shape_subplot = [[(0, 0), (0, 1), (1, 0), (1, 1)], [1, 1, 1, 1], [1, 1, 1, 1]]
for i in range(num_subplot):
    axes[i] = plt.subplot2grid(
        layout_plot, list_shape_subplot[0][i],
        rowspan = list_shape_subplot[1][i],
        colspan = list_shape_subplot[2][i]
    )

sns.scatterplot(data = df_games, x = 'NA_Sales', y = 'JP_Sales', alpha = 0.1, ax = axes[0])
sns.scatterplot(data = df_games, x = 'NA_Sales', y = 'EU_Sales', alpha = 0.1, ax = axes[2])
sns.scatterplot(data = df_games, x = 'JP_Sales', y = 'EU_Sales', alpha = 0.1, ax = axes[3])

plt.tight_layout()
plt.show()

plt.figure(figsize = (5, 4), facecolor = "white")

sns.lmplot(
    data = df_games,
    x = 'NA_Sales', y = 'JP_Sales',
    hue = 'Genre'
)

plt.show()

"""The distinct pattern of Japanese video game sales reflects deeper cultural preferences, platform loyalties, and gameplay expectations that differ substantially from Western markets. Game developers and publishers looking to succeed across all regions need to understand these fundamental differences rather than treating the global market as homogeneous.

But Japan users have different genre preferences.
(especially Role-Playing, Shooter)
"""

hit_threshold = 1.0
df_games['Is_Hit'] = df_games['Global_Sales'] > hit_threshold

hit_rate_genre = df_games.groupby('Genre')['Is_Hit'].mean().sort_values(ascending=False) * 100


plt.figure(figsize=(12, 6))
sns.barplot(x=hit_rate_genre.index, y=hit_rate_genre.values)
plt.title(f'Hit Rate by Genre (% of Games with >={hit_threshold}M Global Sales)')
plt.ylabel('Hit Rate (%)')
plt.xlabel('Genre')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

hit_rate_platform = df_games.groupby('Platform')['Is_Hit'].mean().sort_values(ascending=False) * 100
valid_platforms = df_games['Platform'].value_counts()[df_games['Platform'].value_counts() >= 10].index
hit_rate_platform = hit_rate_platform[hit_rate_platform.index.isin(valid_platforms)]

plt.figure(figsize=(12, 6))
sns.barplot(x=hit_rate_platform.head(15).index, y=hit_rate_platform.head(15).values)
plt.title(f'Hit Rate by Platform (% of Games with >={hit_threshold}M Global Sales)')
plt.ylabel('Hit Rate (%)')
plt.xlabel('Platform')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""Inference:

Platform and Shooter genres have the highest hit rates, with over 20% of games in these genres achieving blockbuster status (>=1M sales).

Fighting, Racing, and Misc genres also have relatively high hit rates (around 14–15%).

Adventure and Strategy genres have the lowest hit rates, with fewer than 5% of games reaching hit status.

Action, Role-Playing, Sports, and Simulation genres are in the middle, with hit rates between 10–14%.

Business Insight:
If a publisher wants to maximize the chance of producing a blockbuster, focusing on Platform or Shooter games is statistically the best bet. Adventure and Strategy genres are riskier for hits.

Inference:

NES and GB (Game Boy) have exceptionally high hit rates (NES >70%, GB >50%), indicating that a large proportion of games released on these classic platforms became hits.

GEN (Genesis) and SNES also have high hit rates (20–40%).

Modern platforms like PS4, XOne, and X360 have hit rates around 20%.

Many platforms (e.g., 3DO, DC, WiiU) have low hit rates (<15%).

Some platforms with many releases (e.g., PS2, PS3) have moderate hit rates, suggesting a more competitive or saturated market.

Business Insight:
Classic Nintendo platforms were highly successful for hits, but in the modern era, hit rates are more evenly distributed. Platform choice still matters, especially for targeting blockbuster potential.
"""

genre_by_year = pd.crosstab(df_games['Year_of_Release'], df_games['Genre'])
genre_by_year_pct = genre_by_year.div(genre_by_year.sum(axis=1), axis=0) * 100

genre_by_year_pct = genre_by_year_pct.loc[1995:2016]

plt.figure(figsize=(15, 8))
for genre in genre_by_year_pct.columns:
    plt.plot(genre_by_year_pct.index, genre_by_year_pct[genre], label=genre, linewidth=2)

plt.title('Genre Market Share Trends Over Time')
plt.xlabel('Year')
plt.ylabel('Market Share (%)')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

top_platforms = df_games['Platform'].value_counts().head(10).index
platform_df = df_games[df_games['Platform'].isin(top_platforms)]
platform_by_year = pd.crosstab(platform_df['Year_of_Release'], platform_df['Platform'])
platform_by_year_pct = platform_by_year.div(platform_by_year.sum(axis=1), axis=0) * 100

plt.figure(figsize=(15, 8))
for platform in platform_by_year_pct.columns:
    plt.plot(platform_by_year_pct.index, platform_by_year_pct[platform], label=platform, linewidth=2)

plt.title('Platform Market Share Trends Over Time')
plt.xlabel('Year')
plt.ylabel('Market Share (%)')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""Inference:

Action genre’s market share has increased significantly since 2010, peaking above 40% in recent years.

Sports, Racing, and Platform genres have declined in market share over time.

Shooter and Role-Playing genres have maintained steady or slightly increasing shares.

Other genres (e.g., Puzzle, Strategy, Simulation) remain niche throughout the period.

Business Insight:
The industry has shifted towards Action games in the last decade, while traditional genres like Sports and Platform have lost ground. This reflects changing consumer preferences and possibly the rise of open-world and action-adventure titles.

inference:

The market is cyclical, with different platforms dominating at different times.

NES and GB dominated the late 80s and early 90s.

PS2, Wii, and DS took over in the 2000s.

In recent years, PS4 and XOne have gained market share.

The sharp rises and falls reflect console generation cycles and the impact of new hardware launches.

Business Insight:
Platform dominance is temporary and shifts with each console generation. Publishers should adapt their strategies to align with the current leading platforms and anticipate upcoming transitions.
"""

top_platforms_by_sales = df_games.groupby('Platform')['Global_Sales'].sum().nlargest(10).index
platform_lifecycle_df = df_games[df_games['Platform'].isin(top_platforms_by_sales)]

platform_count_by_year = platform_lifecycle_df.pivot_table(
    index='Year_of_Release',
    columns='Platform',
    values='Global_Sales',
    aggfunc='count'
)

platform_sales_by_year = platform_lifecycle_df.pivot_table(
    index='Year_of_Release',
    columns='Platform',
    values='Global_Sales',
    aggfunc='sum'
)


plt.figure(figsize=(15, 8))
for platform in platform_count_by_year.columns:
    plt.plot(platform_count_by_year.index, platform_count_by_year[platform], label=platform, linewidth=2)

plt.title('Number of Game Releases by Platform Over Time')
plt.xlabel('Year')
plt.ylabel('Number of Releases')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()


plt.figure(figsize=(15, 8))
for platform in platform_sales_by_year.columns:
    plt.plot(platform_sales_by_year.index, platform_sales_by_year[platform], label=platform, linewidth=2)

plt.title('Total Global Sales by Platform Over Time')
plt.xlabel('Year')
plt.ylabel('Global Sales (Millions)')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

"""Each platform has a distinct lifecycle, with a sharp rise in releases after launch, a peak, and then a decline as the platform ages.

The PS2, DS, and Wii had the highest peaks in releases, indicating their popularity and long support.

Most platforms see a rapid decline in releases after about 5–10 years, reflecting the typical console generation cycle.

Actionable Insight: Platform support is time-limited. Developers and publishers should time their releases to coincide with a platform’s peak years for maximum exposure.

The sales trends closely follow the release trends: platforms with more releases in a given year also see higher total sales.

The PS2, DS, and Wii again stand out for their high sales peaks.

As platforms age and new ones are introduced, sales shift rapidly to the newer platforms.

Actionable Insight: The commercial success of a platform is tightly linked to its active years and the volume of releases. Early adoption and timely releases are key for maximizing sales.
"""

top_threshold = np.percentile(df_games['Global_Sales'], 99)
outliers = df_games[df_games['Global_Sales'] >= top_threshold].copy()


outliers = outliers.sort_values('Global_Sales', ascending=False)

# top 20 blockbusters
print(f"Top 1% threshold: {top_threshold:.2f}M global sales")
print(f"Number of blockbuster games: {len(outliers)}")
display(outliers[['Name', 'Platform', 'Year_of_Release', 'Genre', 'Publisher', 'Global_Sales', 'Critic_Score']].head(20))


plt.figure(figsize=(12, 6))
sns.countplot(x='Genre', data=outliers)
plt.title('Distribution of Blockbuster Games by Genre')
plt.xlabel('Genre')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

plt.figure(figsize=(12, 6))
sns.countplot(x='Platform', data=outliers)
plt.title('Distribution of Blockbuster Games by Platform')
plt.xlabel('Platform')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

# Market share by publisher (top 10)
publisher_sales = df_games.groupby('Publisher')['Global_Sales'].sum().sort_values(ascending=False)
top_publishers = publisher_sales.head(10)
other_publishers = pd.Series([publisher_sales[10:].sum()], index=['Other'])
publisher_sales_plot = pd.concat([top_publishers, other_publishers])

plt.figure(figsize=(12, 8))
plt.pie(publisher_sales_plot, labels=publisher_sales_plot.index, autopct='%1.1f%%',
        startangle=90, shadow=True, explode=[0.1]+[0]*10)
plt.title('Market Share by Publisher (Global Sales)')
plt.axis('equal')
plt.tight_layout()
plt.show()

# Market share by genre
genre_sales = df_games.groupby('Genre')['Global_Sales'].sum().sort_values(ascending=False)

plt.figure(figsize=(12, 8))
plt.pie(genre_sales, labels=genre_sales.index, autopct='%1.1f%%', startangle=90, shadow=True)
plt.title('Market Share by Genre (Global Sales)')
plt.axis('equal')
plt.tight_layout()
plt.show()

platform_analysis = df_games.groupby('Platform').agg({
    'Name': 'count',
    'Global_Sales': 'sum'  # Total sales
}).reset_index()

platform_analysis.columns = ['Platform', 'Number_of_Releases', 'Total_Sales']


correlation = platform_analysis['Number_of_Releases'].corr(platform_analysis['Total_Sales'])

plt.figure(figsize=(12, 8))
sns.scatterplot(x='Number_of_Releases', y='Total_Sales', data=platform_analysis, s=100, alpha=0.7)


for i, row in platform_analysis.iterrows():
    plt.text(row['Number_of_Releases']+10, row['Total_Sales'], row['Platform'], fontsize=9)

plt.title(f'Total Sales vs. Number of Releases by Platform (Correlation: {correlation:.2f})')
plt.xlabel('Number of Releases')
plt.ylabel('Total Global Sales (Millions)')
plt.grid(linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

platform_analysis['Avg_Sales_Per_Game'] = platform_analysis['Total_Sales'] / platform_analysis['Number_of_Releases']


platform_analysis_sorted = platform_analysis.sort_values('Avg_Sales_Per_Game', ascending=False)

plt.figure(figsize=(12, 8))
sns.barplot(x='Platform', y='Avg_Sales_Per_Game', data=platform_analysis_sorted.head(15))
plt.title('Average Sales per Game by Platform')
plt.xlabel('Platform')
plt.ylabel('Average Global Sales per Game (Millions)')
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()

#CLASSIFICATION MODEL

print(df_games_ml.columns.tolist())

def add_features(df):
    # 1. Publisher success rate (avg sales per publisher)
    publisher_avg = df.groupby('Publisher', observed=True)['Global_Sales'].mean().reset_index()
    publisher_avg.columns = ['Publisher', 'Publisher_Avg_Sales']
    df = df.merge(publisher_avg, on='Publisher', how='left')

    # 2. Platform age (years since first game on platform)
    platform_first_year = df.groupby('Platform', observed=True)['Year_of_Release'].min().reset_index()
    platform_first_year.columns = ['Platform', 'First_Release_Year']
    df = df.merge(platform_first_year, on='Platform', how='left')
    df['Platform_Age'] = df['Year_of_Release'] - df['First_Release_Year']

    # 3. Genre popularity by year
    genre_year_count = df.groupby(['Genre', 'Year_of_Release'], observed=True).size().reset_index()
    genre_year_count.columns = ['Genre', 'Year_of_Release', 'Genre_Year_Count']
    df = df.merge(genre_year_count, on=['Genre', 'Year_of_Release'], how='left')

    # 4. Critic-User score gap
    df['Score_Gap'] = abs(df['Critic_Score']/10 - df['User_Score'])

    # 5. Create Is_Hit feature for classification
    df['Is_Hit'] = (df['Global_Sales'] > 1.0).astype(int)

    return df
    df['Combined_Score'] = (df['Critic_Score'] + df['User_Score'] * 10) / 2
    df['Game_Age'] = 2025 - df['Year_of_Release']
    platform_popularity = df.groupby('Platform')['Name'].count().reset_index()
    platform_popularity.columns = ['Platform', 'Platform_Game_Count']
    df = df.merge(platform_popularity, on='Platform', how='left')

feature_cols = [
    'Platform', 'Genre', 'Publisher', 'Rating', 'Year_of_Release',
    'Critic_Score', 'User_Score', 'Publisher_Avg_Sales', 'Platform_Age',
    'Genre_Year_Count', 'Score_Gap'

]

for col in ['Combined_Score', 'Game_Age', 'Platform_Game_Count']:
    if col in df.columns:
        feature_cols.append(col)

X = df[feature_cols]
y = df['Is_Hit']

# encode
categorical = ['Platform', 'Genre', 'Publisher', 'Rating']
for col in categorical:
    if X[col].dtype == 'object':
        le = LabelEncoder()
        X[col] = le.fit_transform(X[col])

#scale
scaler = StandardScaler()
X[X.columns] = scaler.fit_transform(X[X.columns])


X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

clf = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')
clf.fit(X_train, y_train)

y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

import matplotlib.pyplot as plt
import seaborn as sns
feat_imp = pd.DataFrame({
    'Feature': feature_cols,
    'Importance': clf.feature_importances_
}).sort_values(by='Importance', ascending=False)
plt.figure(figsize=(10,6))
sns.barplot(data=feat_imp, x="Importance", y="Feature", palette="viridis")
plt.title("Feature Importance - Blockbuster Classifier")
plt.tight_layout()
plt.show()

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, precision_recall_curve
from imblearn.over_sampling import SMOTE
import matplotlib.pyplot as plt
import numpy as np

#smote #checkdocs
smote = SMOTE(random_state=42)
X_train_bal, y_train_bal = smote.fit_resample(X_train, y_train)


clf = RandomForestClassifier(n_estimators=100, random_state=42, class_weight='balanced')
clf.fit(X_train_bal, y_train_bal)


y_proba = clf.predict_proba(X_test)[:, 1]


precisions, recalls, thresholds = precision_recall_curve(y_test, y_proba)

plt.figure(figsize=(8,5))
plt.plot(thresholds, precisions[:-1], label='Precision (Hit)')
plt.plot(thresholds, recalls[:-1], label='Recall (Hit)')
plt.xlabel('Threshold')
plt.ylabel('Score')
plt.title('Precision-Recall vs Threshold')
plt.legend()
plt.grid()
plt.show()


optimal_idx = np.argmax(precisions[:-1] + recalls[:-1])
optimal_threshold = thresholds[optimal_idx]
print(f"Optimal threshold: {optimal_threshold:.2f}")


y_pred_balanced = (y_proba >= optimal_threshold).astype(int)

print("Balanced Model Classification Report:")
print(classification_report(y_test, y_pred_balanced))
print("Confusion Matrix:")
print(confusion_matrix(y_test, y_pred_balanced))

import pandas as pd


# Publisher_Avg_Sales
publisher_avg = df_games.groupby('Publisher', observed=True)['Global_Sales'].mean().reset_index()
publisher_avg.columns = ['Publisher', 'Publisher_Avg_Sales']
df_games = df_games.merge(publisher_avg, on='Publisher', how='left')

# Genre_Year_Count
genre_year_count = df_games.groupby(['Genre', 'Year_of_Release'], observed=True).size().reset_index(name='Genre_Year_Count')
df_games = df_games.merge(genre_year_count, on=['Genre', 'Year_of_Release'], how='left')

# Platform_Age
platform_first_year = df_games.groupby('Platform', observed=True)['Year_of_Release'].min().reset_index()
platform_first_year.columns = ['Platform', 'First_Release_Year']
df_games = df_games.merge(platform_first_year, on='Platform', how='left')
df_games['Platform_Age'] = df_games['Year_of_Release'] - df_games['First_Release_Year']

from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.neighbors import NearestNeighbors

features = [
    'Critic_Score', 'Publisher_Avg_Sales', 'User_Score', 'Genre_Year_Count',
    'Year_of_Release', 'Platform_Age', 'Genre', 'Platform', 'Publisher', 'Rating', 'Name'
]

df_knn = df_games[features].dropna().reset_index(drop=True)

categorical = ['Genre', 'Platform', 'Publisher', 'Rating']
numerical = [f for f in features if f not in categorical and f != 'Name']

encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)
encoded_cat = encoder.fit_transform(df_knn[categorical])
encoded_cat_df = pd.DataFrame(encoded_cat, columns=encoder.get_feature_names_out(categorical))

scaler = StandardScaler()
scaled_num = scaler.fit_transform(df_knn[numerical])
scaled_num_df = pd.DataFrame(scaled_num, columns=numerical)

X_knn = pd.concat([scaled_num_df.reset_index(drop=True), encoded_cat_df.reset_index(drop=True)], axis=1)

knn = NearestNeighbors(n_neighbors=6, metric='euclidean')
knn.fit(X_knn)

def recommend_games(game_name, n_recommendations=5):
    idx_list = df_knn[df_knn['Name'].str.lower() == game_name.lower()].index
    if len(idx_list) == 0:
        return f"Game '{game_name}' not found in dataset."
    idx = idx_list[0]
    query = pd.DataFrame([X_knn.iloc[idx]], columns=X_knn.columns)
    distances, indices = knn.kneighbors(query, n_neighbors=n_recommendations+1)

    rec_indices = [i for i in indices[0] if i != idx][:n_recommendations]
    recommendations = df_knn.iloc[rec_indices][['Name', 'Genre', 'Platform', 'Publisher', 'Critic_Score', 'User_Score']]
    return recommendations

#usageEG
print(recommend_games("Wii Sports"))

"""Problem Statement
Can we segment games by their sales performance across different regions (NA, EU, JP, Other) and identify what factors drive regional popularity?
"""

df = pd.read_csv('cleaned_data.csv')


features = [
    'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales',
    'Genre', 'Platform', 'Publisher', 'Year_of_Release',
    'Critic_Score', 'User_Score', 'Rating'
]
df_seg = df[features].dropna()

cat = ['Genre', 'Platform', 'Publisher', 'Rating']
num = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Critic_Score', 'User_Score', 'Year_of_Release']

encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')
cat_encoded = encoder.fit_transform(df_seg[cat])
cat_df = pd.DataFrame(cat_encoded, columns=encoder.get_feature_names_out(cat))

scaler = StandardScaler()
num_scaled = scaler.fit_transform(df_seg[num])
num_df = pd.DataFrame(num_scaled, columns=num)

X = pd.concat([num_df.reset_index(drop=True), cat_df.reset_index(drop=True)], axis=1)

#optimalnumberofclusters
inertia = []
for k in range(2, 8):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(8, 4))
plt.plot(range(2, 8), inertia, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()


k_opt = 4
kmeans = KMeans(n_clusters=k_opt, random_state=42)
df_seg['Cluster'] = kmeans.fit_predict(X)

cluster_summary = df_seg.groupby('Cluster')[['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales']].mean()
print('Average regional sales by cluster:')
print(cluster_summary)


print('\nTop genres by cluster:')
print(df_seg.groupby('Cluster')['Genre'].value_counts().groupby('Cluster').head(3))

print('\nTop platforms by cluster:')
print(df_seg.groupby('Cluster')['Platform'].value_counts().groupby('Cluster').head(3))


plt.figure(figsize=(8, 6))
sns.scatterplot(data=df_seg, x='NA_Sales', y='JP_Sales', hue='Cluster', palette='tab10')
plt.title('Clusters by NA vs JP Sales')
plt.show()

numeric_features = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales',
                    'Global_Sales', 'Critic_Score', 'User_Score']

pca_data = df_games[numeric_features].dropna()

scaler = StandardScaler()
pca_data_scaled = scaler.fit_transform(pca_data)


pca = PCA()
principal_components = pca.fit_transform(pca_data_scaled)


explained_variance = pca.explained_variance_ratio_
cumulative_variance = np.cumsum(explained_variance)


plt.figure(figsize=(10, 6))
plt.bar(range(1, len(explained_variance)+1), explained_variance, alpha=0.7, label='Individual explained variance')
plt.step(range(1, len(cumulative_variance)+1), cumulative_variance, where='mid', label='Cumulative explained variance')
plt.axhline(y=0.9, linestyle='--', color='r', alpha=0.5, label='90% explained variance threshold')
plt.xlabel('Number of Principal Components')
plt.ylabel('Explained Variance Ratio')
plt.title('Explained Variance by Components')
plt.legend(loc='best')
plt.tight_layout()
plt.show()

n_components = np.argmax(cumulative_variance >= 0.9) + 1
print(f"Number of components needed to explain 90% of variance: {n_components}")


pca = PCA(n_components=n_components)
principal_components = pca.fit_transform(pca_data_scaled)


pca_df = pd.DataFrame(
    data=principal_components,
    columns=[f'PC{i+1}' for i in range(n_components)]
)

pca_df['Genre'] = df_games.loc[pca_data.index, 'Genre'].values

plt.figure(figsize=(12, 8))
sns.scatterplot(x='PC1', y='PC2', hue='Genre', data=pca_df, palette='viridis', alpha=0.7)
plt.title('PCA: First Two Principal Components by Genre')
plt.xlabel(f'PC1 ({explained_variance[0]:.2%} explained variance)')
plt.ylabel(f'PC2 ({explained_variance[1]:.2%} explained variance)')
plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.show()


print("Feature importance in PC1:")
pc1_importance = pd.DataFrame({
    'Feature': numeric_features,
    'Importance': np.abs(pca.components_[0])
}).sort_values('Importance', ascending=False)
print(pc1_importance)

import pandas as pd
import numpy as np

df_games['User_Score'] = pd.to_numeric(df_games['User_Score'], errors='coerce')


for col in ['Critic_Score', 'User_Score', 'NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales']:
    df_games[col].fillna(df_games[col].median(), inplace=True)

df_games.dropna(subset=['Platform', 'Genre', 'Publisher', 'Year_of_Release'], inplace=True)


df_games.reset_index(drop=True, inplace=True)

numeric_features = ['NA_Sales', 'EU_Sales', 'JP_Sales', 'Other_Sales', 'Global_Sales', 'Critic_Score', 'User_Score']
categorical_features = ['Platform', 'Genre', 'Publisher', 'Rating']

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt


numeric_data = df_games[numeric_features]


scaler = StandardScaler()
numeric_scaled = scaler.fit_transform(numeric_data)

pca = PCA(n_components=7)
pca.fit(numeric_scaled)


plt.figure(figsize=(8,5))
plt.bar(range(1, len(pca.explained_variance_ratio_)+1), pca.explained_variance_ratio_, alpha=0.6, label='Individual Explained Variance')
plt.step(range(1, len(pca.explained_variance_ratio_)+1), pca.explained_variance_ratio_.cumsum(), where='mid', label='Cumulative Explained Variance')
plt.axhline(y=0.9, color='r', linestyle='--', label='90% Explained Variance Threshold')
plt.xlabel('Principal Component')
plt.ylabel('Explained Variance Ratio')
plt.title('Explained Variance by PCA Components')
plt.legend(loc='best')
plt.show()

n_components = 3
pca = PCA(n_components=n_components)
numeric_pca = pca.fit_transform(numeric_scaled)

import numpy as np
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer

pca_df = pd.DataFrame(numeric_pca, columns=[f'PC{i+1}' for i in range(n_components)])

encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)

cat_encoded = encoder.fit_transform(df_games[categorical_features])
cat_df = pd.DataFrame(cat_encoded, columns=encoder.get_feature_names_out(categorical_features))


X = pd.concat([pca_df.reset_index(drop=True), cat_df.reset_index(drop=True)], axis=1)


y = np.log1p(df_games['Global_Sales'])

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred_log = model.predict(X_test)
y_pred = np.expm1(y_pred_log)
y_true = np.expm1(y_test)

rmse = np.sqrt(mean_squared_error(y_true, y_pred))
r2 = r2_score(y_true, y_pred)

print(f"RMSE: {rmse:.4f}")
print(f"R^2: {r2:.4f}")

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
numeric_scaled = scaler.fit_transform(df_games[numeric_features].drop('Global_Sales', axis=1))

cat_encoded = encoder.transform(df_games[categorical_features])
cat_df = pd.DataFrame(cat_encoded, columns=encoder.get_feature_names_out(categorical_features))

X_orig = pd.concat([pd.DataFrame(numeric_scaled, columns=numeric_features[:-1]), cat_df], axis=1)

X_train_o, X_test_o, y_train_o, y_test_o = train_test_split(X_orig, y, test_size=0.2, random_state=42)

model_orig = RandomForestRegressor(n_estimators=100, random_state=42)
model_orig.fit(X_train_o, y_train_o)


y_pred_log_o = model_orig.predict(X_test_o)
y_pred_o = np.expm1(y_pred_log_o)
y_true_o = np.expm1(y_test_o)

rmse_o = np.sqrt(mean_squared_error(y_true_o, y_pred_o))
r2_o = r2_score(y_true_o, y_pred_o)

print(f"Without PCA - RMSE: {rmse_o:.4f}")
print(f"Without PCA - R^2: {r2_o:.4f}")

"""Cluster 0 (Moderate, Balanced Sales)
Top genres: Sports, Action, Racing

Top platforms: PS, PS2, GBA

Insight: These are traditional console genres/platforms with broad, but moderate, appeal.

Cluster 1 (Low Sales, NA/EU Focus)
Top genres: Action, Sports, Shooter

Top platforms: X360, Wii, PS2

Insight: Likely Western-focused games, especially shooters and action titles, with little traction in Japan.

Cluster 2 (Blockbusters)
Top genres: Shooter, Role-Playing, Platform

Top platforms: Wii, X360, DS

Insight: These are the global hits—franchise shooters, RPGs, and platformers that perform well everywhere.

Cluster 3 (Low Sales, Handheld/Niche)
Top genres: Action, Misc, Sports

Top platforms: DS, PSP, PS3

Insight: Handheld and niche games, possibly with more casual or experimental content.

Business and Data Science Insights
Regional Marketing:

Cluster 1 games should focus marketing on North America and Europe, not Japan.

Cluster 2 games (blockbusters) should get global marketing budgets and localization.

Cluster 0 games are steady, moderate sellers—good for stable revenue but not blockbusters.

Cluster 3 games may require targeted marketing to niche or handheld audiences.

Genre/Platform Strategy:

Shooters and RPGs are most likely to become global blockbusters.

Sports and Racing games do well in moderate, balanced clusters.

DS and PSP are strong platforms for niche/handheld games.

Localization & Release Planning:

Invest in localization for games in Cluster 2.

Consider skipping or minimizing JP localization for Cluster 1 genres/platforms.




"""